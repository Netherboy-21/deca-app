<h1>Transactions</h1><br>

<%= button_to "+ New transaction", new_account_app_transaction_path(@account), class: "new", method: :get%>

<h3>Recent transactions</h3>
<%= link_to "View report for this account", account_report_path(@account) %><br>

<input type="text" placeholder="Search for transaction" value="" id="name-search">
<select id="category-search">
  <!-- Default/no filter option -->
  <option value="nofilter">
    Filter by category
  </option>
  <!-- Turn each category into a filter option -->
  <% @categories.each do |category| %>
    <option value="<%= category.name %>">
      <%= category.name %>
    </option>
  <% end %>
</select>

<table id="transactions">
  <!--Column headers-->
  <th>Date</th>
  <th>Summary</th>
  <th>Amount</th>
  <th>Category</th>

  <!-- Dynamically generate table body -->
  <% @transactions.each do |transaction| %>
    <tr>
      <td>
        <%= transaction.date.strftime("%F") %>
      </td>
      <td>
        <%= link_to transaction.summary, [ @account, transaction ] %>
      </td>
      <td>
        <%= ( transaction.is_income ? "$" : "-$" ) + transaction.amount.to_s %>
      </td>
      <td>
        <%= transaction.category %>
      </td>
    </tr>
  <% end %>
</table>

<!-- Search functionality -->
<script>
    function searchRows() {
        // Declare variables
        let ninput, nfilter, cinput, cfilter, table, tr, ntd, ctd, i, ntxtValue, ctxtValue;
        ninput = document.getElementById("name-search");
        nfilter = ninput.value.toUpperCase();
        cinput = document.getElementById("category-search");
        cfilter = cinput.value.toUpperCase();
        table = document.getElementById("transactions");
        tr = table.getElementsByTagName("tr");
        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            ntd = tr[i].getElementsByTagName("td")[1];
            ctd = tr[i].getElementsByTagName("td")[3];
            if (ntd) {
                ntxtValue = ntd.textContent || ntd.innerText;
                ctxtValue = (ctd.textContent || ctd.innerText).trim()
                if (ntxtValue.toUpperCase().indexOf(nfilter) > -1 && ((ctxtValue.toUpperCase().indexOf(cfilter) > -1 && ctxtValue.length === cfilter.length) || cfilter === "NOFILTER")) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    if(typeof(String.prototype.trim) === "undefined")
    {
        String.prototype.trim = function()
        {
            return String(this).replace(/^\s+|\s+$/g, '');
        };
    }

    $('#name-search').on('keyup',() => {
        $('tr').css('display','table-row');
        searchRows();
    })

    $('#category-search').on("change",() => {
        $('tr').css('display','table-row');
        searchRows();
    })
</script>